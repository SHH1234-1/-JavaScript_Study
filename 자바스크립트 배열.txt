// 1. Declaration
const arr1 = new Array(); //배열을 선언하는 방법2가지
const arr2 = [1 , 2]; 

//2. Index position
const fruits = ['사과', '바나나'];
console.log(fruits); 
console.log(fruits.length); //배열의 크기 2
console.log(fruits[0]);
console.log(fruits[1]);
console.log(fruits[2]);
console.log(fruits[fruits.length - 1]); //배열의 마지막 데이터를 찾을때 배열의 index는 0부터 시작하므로 배열의 길이에서 -1을 해주면 배열의 가장 마지막 index안에 있는 값을찾을 수 있음

//3. Looping over an array
// print all fruits
// a. for
for (let i =0;i < fruits.length; i++){
   console.log(fruits[i]);
}

// b. for of
for (let fruit of fruits){
  console.log(fruit);
}

// c. forEach
fruits.forEach((fruit) => console.log(fruit));

(16:55)

// 4. Addtion, deletion, copy
push: add an item to the end
fruits.push('사과', '딸기');

//pop: remove an item from the end
fruits.pop();
fruits.pop(); //stack push pop이랑 같은 pop
console.log(fruits);

//unshuft : add an item to the benigging
fruits.unshuft('딸기','레몬'); //배열 가장 앞index에 값 추가
console.log(fruits);

// shift: remove an item from the benigging
fruits.shift(); //배열 가장 앞의 자리부터 데이터 제거
console.log(fruits);

// note!! shift, unshift are slower than pop, push
//가장 뒤값을 늘리고 빼는 push pop은 앞의 index의 데이터를 건들지 않으므로 shift와 unshift보다 더 빠르다
// splice : remove an item by index position
fruit.push('딸기','복숭아','레몬');
console.log(fruits);
fruits.splice(1,1); //지정된 index부터  삭제할 개수 삭제할 개수를 지정하지 않으면 모든 값을 다 삭제해버림
fruits.splice(1,1,'초록사과','수박'); // 1번째 index부터 값1개를 삭제하고 삭제한 위치에 초록사과와 수박이라는 데이터 값을 추가
console.log(fruits);

//combine two arrays
const fruit2 = ['초록배','자몽'];
const newFruits = fruits.concat(fruits2); //concat 두개의 배열을 합쳐주는 함수

//5.Searching
//find the index
console.log(fruits.indexof('사과')); //사과의 index 번호가 호출 해당하는 index가 없으면 -1로 출력
console.log(fruits.include('수박')) //fruits 배열안에 수박이 있는지 없는지 확인 true or false로 출력

//lastIndexof
console.log(fruits);
console.log(fruits.indexOf('사과')); //사과의 가장 빠른 index값
 console.log(fruits.lastindexOf('사과')); //사과의 가장 나중의 index값 호출 


